	====================
	=== Coding Standards
	====================


General Conventions
___________________

Editors
-------
* Tabs: Configure your editor to use tabs instead of spaces so that each developer can set tabs to their preferred display size.
* Linefeeds: Your editor must save files using UNIX linefeed format (not DOS CR/LF or Mac CR format). Also ensure your files end with a linefeed if your editor does not automatically add one.


Indent-style
-------------
* Always include braces even in cases where they are optional.
* Use K&R indent style.
* For example:
	if (condition) {
		...
	} else {
		...
	}


Naming Conventions
------------------
* Use descriptive names. One character names are only acceptable as index variables in for loops.
* Variable and function/method names (excluding constructors) should start with a lowercase letter and capitalize all other words. E.g., $myVariableName; function myMethodName() { }
* Class names should start with a capital letter and capitalize all words. E.g., MyClassName
* Constant names should be capitalized with words separated by an underscore. In general, constant names should also be prefixed with the package/class name to avoid collisions. E.g., ROLE_ID_EDITOR


Comments
--------
* PHPDoc/Javadoc-style commenting is encouraged. See <http://www.phpdoc.de/>
* For example:
	/**
	 * My method.
	 * @param $foo string
	 * @return boolean
	 */
	function myMethod($foo) {
		...
	}


PHP Tags
--------
* Use the <?php ?> tags to enclose PHP code instead of the abbreviated <? ?> form.
* Ensure that each opening "<?php" tag is followed by a closing "?>" tag (i.e., do not omit a trailing "?>" at the end of a file even though the PHP parser does not strictly require it).


Quoting Strings
---------------
* Use single quotes (') instead of double quotes (") to quote strings unless the string contains variables or escape sequences.
* Single quotes are slightly more efficient since PHP does not have to perform variable interpolation.


Error Level
-----------
* Code must not produce any error or warning messages with the error_reporting level set to E_ALL (this is the default level set in includes/driver.inc.php).
* This means using $array['key'] rather than $array[key], not using uninitialized variables, etc.
* Note that this means that "@" should not be used haphazardly to suppress error messages.


Global Variables
----------------
* Code should not rely on register_globals being enabled.
* GET/POST/Cookie variables should be accessed through the appropriate array or a helper function.


Other PHP Conventions
_____________________
* The inline form of if/else is acceptable for small statements (e.g., assignments) only. E.g., $foo = $bar ? 1 : 0;
* Use spaces between tokens. E.g., $foo = 1; $i > 0


HTML/XML
--------
* HTML should be XHTML-compliant as much as possible. E.g., use "<br />" instead of "<br>".
* Tag names should be lower case.


SQL
---
* Use spaces between tokens. E.g., "column = ?" instead of "column=?"
* Uppercase SQL keywords. E.g., INSERT, UPDATE, etc.
* Long SQL statements should be logically broken up into multiple lines.
* SQL INSERT statements should always specify the column names.
* For example:
	INSERT INTO mytable (x, y, z)
	VALUES (?, ?, ?)
* All SQL queries should be compatible with at least the versions of MySQL and PostgreSQL supported by the application. Although vendor-specific SQL expressions should be avoided, a record should be kept of any non-portable SQL that does get used (e.g., by filing a bug report).




OJS Conventions
_______________

CVS
---
* A web interface to the CVS repository is located at <http://www.pkp.ubc.ca/cvs/>.
* A brief log message describing the changes made must be included with all CVS commits.
* Whenever possible, CVS commit log messages should also include "#BUG_ID_NUMBER#" to reference a Bugzilla report at <http://pkp.sfu.ca/bugzilla/> (it will be automatically linked when viewing a log in CVSweb).


File Header
-----------
* PHP files should begin with a header similar to the following (non-PHP files should begin with a similar header adapted to the appropriate comment-style):

/**
 * FILENAME.inc.php
 *
 * Copyright (c) 2003-2004 The Public Knowledge Project
 * Distributed under the GNU GPL v2. For full terms see the file docs/COPYING.
 *
 * @package PACKAGE (optional)
 *
 * DESCRIPTION.
 *
 * $Id$
 */


Database Queries
-----------
* SQL queries should use the ADOdb abstraction layer.
* SQL should use placeholders for variables.
* For example:
	$dbconn = $DBConnection::getConn();
	$result = $dbconn->execute('SELECT x FROM mytable WHERE y = ?', array($y));
	$result = $dbconn->execute('INSERT INTO mytable (x, y) VALUES (?, ?)', array($x, $y));


Direct Access Objects
---------------------
* DAO classes should be used to encapsulate all database calls.
* Use DAORegistry to retrieve a reference to a DAO object.
* For example:
	$sessionDao = &DAORegistry::getDAO('SessionDAO');


Templates
---------
* HTML output in PHP code should be kept to a minimum.
* Most or all HTML output should come from using the Smarty template abstraction layer.
* The template engine supports basic conditional logic and loops and can access objects and arrays, but the complexity of the business logic used in templates should be minimized.
* Basic template skeleton:

	{**
	 * FILENAME.tpl
	 *
	 * Copyright (c) 2003-2004 The Public Knowledge Project
	 * Distributed under the GNU GPL v2. For full terms see the file docs/COPYING.
	 *
	 * DESCRIPTION.
	 *
	 * $Id$
	 *}
	{assign var="pageTitle" value="user.userHome"}
	{include file="common/header.tpl"}
	...
	{include file="common/footer.tpl"}


Authorization
-------------
* Use methods in Validation class to check user credentials.
* For example:
	Validation::isLoggedIn();
	Validation::isAuthorized(ROLE_ID_JOURNAL_MANAGER, $journalId);
	Validation::isJournalManager($journalId); [ preferred to isAuthorized() ]


Localization
------------
* i18n strings are defined in locale/<locale_key>/locale.xml.
* Key names should be in the form "sectionname(.subsectionname)*.name". E.g., "manager.setup.journalTitle"
* Use {translate key="my.key.name"} in templates to translate i18n keys.
* Use the String wrapper class in place of the built-in string manipulation/regexp routines when handling data that could potentially be in UTF-8 (e.g., user input, parsed user files, etc.).


Input Validation
----------------
* User input should be properly validated/escaped (do not rely on magic_quotes_gpc being on or off).
* For example, in template forms:
	<input type="text" name="title" value="{$title|escape}" />
* Retrieving user input:
	$foo = Request::getUserVar('foo');


Other Tips
----------
* Use Request::redirect($url) for HTTP redirects instead of header('Location: ...');
